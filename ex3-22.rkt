(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-rear-ptr! v)
      (set! rear-ptr v)
      v)
    (define (set-front-ptr! v)
      (set! front-ptr v)
      v)
    (define (empty?)
      (null? front-ptr))
    (define (front-queue)
      (if (empty?)
        (error "FRONT called with an empty queue")
        (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
            (cond ((empty?)
                   (set-front-ptr! new-pair)
                   (set-rear-ptr! new-pair)
                   dispatch)
                  (else
                    (set-cdr! rear-ptr new-pair)
                    (set-rear-ptr! new-pair)
                    dispatch))))
    (define (delete-queue)
      (cond ((empty?) (error "DELETE! called with an empty queue"))
            (else (set-front-ptr! (cdr front-ptr)))))
    (define (dispatch m)
      (cond ((eq? m 'front-ptr) front-ptr)
            ((eq? m 'rear-ptr) rear-ptr)
            ((eq? m 'set-rear-ptr!) set-rear-ptr!)
            ((eq? m 'set-front-ptr!) set-front-ptr!)
            ((eq? m 'empty-queue?) (empty?))
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'front-queue) (front-queue))
            ((eq? m 'delete-queue) (delete-queue))))
    dispatch))

(define q1 (make-queue))

(write (q1 'empty-queue?))

((q1 'insert-queue!) 'a)
((q1 'insert-queue!) 'b)
((q1 'insert-queue!) 'c)

(write (q1 'front-queue))

(q1 'delete-queue)
(q1 'delete-queue)

(write (q1 'front-queue))

(q1 'delete-queue)

(write (q1 'empty-queue?))
